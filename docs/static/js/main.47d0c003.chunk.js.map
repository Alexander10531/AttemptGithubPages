{"version":3,"sources":["components/AddCategory.tsx","helpers/getGifs.tsx","hooks/useFetchGifs.tsx","components/GifGridItem.tsx","components/GiphyGrid.tsx","components/GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","handleInputChange","prototype","PropTypes","func","isRequired","category","a","requestOptions","method","fetch","encodeURI","response","json","data","gifs","map","img","id","title","url","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","obtainGifs","then","imgs","setTimeout","GifGridItem","className","src","alt","GifGrid","item","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"0NAQO,SAASA,EAAT,GAAiE,IAA1CC,EAAyC,EAAzCA,cAK1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA4BA,OACI,uBACIC,SAlBR,SAAsBC,GAGlBA,EAAEC,iBAIEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAACS,GAAD,OAAgBP,GAAhB,mBAA+BO,OAE7CN,EAAc,MAMlB,UAEI,6BAAMD,IACN,uBACIQ,KAAK,OACLC,MAAQT,EACRU,SAAW,SAACP,IA/BxB,SAA2BA,GAGvBF,EAAcE,EAAEQ,OAAOF,OA4BGG,CAAkBT,SAMpDN,EAAYgB,UAAY,CACpBf,cAAgBgB,IAAUC,KAAKC,Y,uECvD5B,WAA2BC,GAA3B,uBAAAC,EAAA,6DAEGC,EAA8B,CAChCC,OAAQ,OAHT,SAKkBC,MAAM,mFAAD,OAAqFC,UAAUL,GAA/F,aAAsHE,GAL7I,cAKCI,EALD,gBAMkBA,EAASC,OAN3B,uBAMGC,EANH,EAMGA,KACAC,EAAOD,EAAKE,KAAK,SAACC,GAAe,IAAD,EAClC,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXC,IAAG,UAAGH,EAAII,cAAP,aAAG,EAAYC,iBAAiBF,QAXxC,kBAeIL,GAfJ,6C,sBCGQ,SAASQ,EAAcjB,GAClC,MAA0BlB,mBAAS,CAC/B0B,KAAM,GACNU,SAAU,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,YDTP,SAAP,mCCUQC,CAAWtB,GACNuB,MAAK,SAAAC,GACFC,YAAW,WACPL,EAAS,CACLZ,KAAOgB,EACPN,SAAU,MAEf,UAEZ,CAAClB,IAGGmB,ECnBI,SAASO,EAAT,GAAkD,IAA3Bf,EAA0B,EAA1BA,IAGlC,OACI,sBACIgB,UAAU,OADd,UAEI,qBACIC,IAAMjB,EAAIG,IACVe,IAAKlB,EAAIE,QACb,4BAAKF,EAAIE,WCTN,SAASiB,EAAT,GAAoD,IAAjC9B,EAAgC,EAAhCA,SAK9B,EAAwBiB,EAAcjB,GAA/BQ,EAAP,EAAOA,KAAMU,EAAb,EAAaA,QAEb,OACI,qCACI,6BAAMlB,IACLkB,GAAW,cACZ,qBAAKS,UAAU,YAAf,SAEQnB,EAAKE,KAAI,SAAAqB,GACL,OAAO,cAACL,EAAD,CACHf,IAAMoB,GACAA,EAAI,YCbvB,SAASC,IAKpB,MAAoClD,mBAAS,CAAC,WAA9C,mBAAOmD,EAAP,KAAmBpD,EAAnB,KAKA,OACI,qCACI,8CACA,cAACD,EAAD,CAAaC,cAAgBA,IAC7B,uBAEQoD,EAAWvB,KAAK,SAACV,GAAD,OACZ,cAAC8B,EAAD,CAEI9B,SAAWA,GADLA,S,MCnBlCkC,IAASC,OACL,cAACH,EAAD,IACAI,SAASC,eAAe,W","file":"static/js/main.47d0c003.chunk.js","sourcesContent":["// La primera importacion es para usar un cicleHook que sirve para \r\n// revisar parametros que pueden estar cambiando. \r\n// Proptypes para definir el tipado de los parametros que recibe un componente.\r\nimport { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n// Creacion del componente, recordemos que este tiene que ir la primera letra en mayuscula\r\n// cuando se declara y cuando se utiliza el componente. \r\nexport function AddCategory({ setCategories } : {setCategories : any }){\r\n    \r\n    // Creacion y uso de un useState, revisemos que en esta parte el retorna 2\r\n    // valores que mediante decostruccion de un arreglo estamos haciendo, \r\n    // el valore inicial del cycleHook es ''\r\n    const [inputValue, setInputValue] = useState('')\r\n    \r\n    //Creacion de una funcion que recibe como parametro un evento, en este caso \r\n    // el tipado asignado es de any.  \r\n    function handleInputChange(e : any){\r\n        // Si se revisa la linea numero 14 podemos observar que estamos usando la funcion \r\n        // declarada en el cycleHook para modificar el valor inputValue. \r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    // Declaracion de una funcion que se hara cuando se haga enter dentro del componente HTML \r\n    // que deseemos.\r\n    function handleSubmit(e : any){\r\n        // Usamos el evento y llammamos a la funcion preventDefault para evitar que \r\n        // que este recargue la pagina cada vez que se haga submitt sobre el elemento HMTL\r\n        e.preventDefault()\r\n\r\n        // Declaracion de un if que recibe que el valor del input value sea mayor que 2 eliminando\r\n        // los espacios al final del input value usando la funcion trim\r\n        if( inputValue.trim().length > 2 ){\r\n            // Se modifica los valores con setCagorie\r\n            setCategories((cats: any) => [inputValue, ...cats])\r\n            // Se reinicia el valor del input value a una cadena vacia. \r\n            setInputValue('');\r\n        }\r\n        // Console solo para depuracion\r\n    }\r\n    // Retorno de elementos JSX   \r\n    return (\r\n        <form\r\n            onSubmit={ handleSubmit }>\r\n            <h1>{ inputValue }</h1>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ (e)=>{ handleInputChange(e) } }/>\r\n        </form>\r\n    )\r\n}\r\n\r\n// Aqui es donde se declara el tipado que se usara, es un simil del @Input() que se usa en angular\r\nAddCategory.prototype = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","export async function obtainGifs( category : string){\r\n\r\n    const requestOptions : RequestInit= {\r\n        method: 'GET',\r\n    };\r\n    let response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=655m9HK2nTG5N1GIBg7DRIP59xln1d47&q=${ encodeURI(category) }&limit=10`, requestOptions);\r\n    let { data } = await response.json();\r\n    const gifs = data.map( (img : any) => {\r\n        return {\r\n            id : img.id, \r\n            title: img.title, \r\n            url : img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import { useEffect, useState } from \"react\";\r\nimport { obtainGifs } from \"../helpers/getGifs\";\r\n\r\nexport default function useFetchGifs( category : string ){\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading : true,\r\n    })\r\n\r\n    useEffect(() => {\r\n        obtainGifs(category)\r\n            .then(imgs => {\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data : imgs,\r\n                        loading : false,\r\n                    })\r\n                }, 2000)\r\n            }) \r\n    }, [category])\r\n\r\n\r\n    return state;\r\n}","import { IImage as imageGif } from \"../interfaces\"\r\n\r\n\r\nexport default function GifGridItem({ img } : { img : imageGif}){\r\n    \r\n\r\n    return(\r\n        <div\r\n            className=\"card\">\r\n            <img \r\n                src={ img.url } \r\n                alt={img.title}/>\r\n            <p>{ img.title }</p>\r\n        </div>  \r\n    )\r\n}","import useFetchGifs  from '../hooks/useFetchGifs';        \r\n// import { obtainGifs } from \"../helpers/getGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nexport default function GifGrid({ category } : { category : any }){\r\n\r\n    // const [gifs, setgifs] = useState([])\r\n\r\n\r\n    const {data, loading} = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            {loading && 'Cargando...'}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map(item=> {\r\n                        return <GifGridItem \r\n                            img={ item } \r\n                            key={ item['id'] }/>\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","// Esto se explica en el primer componentes. \r\n// La segunda importacion es para usar el componente AddCategory para enviar datos y renderizarlo desde este. \r\nimport { useState } from \"react\";\r\nimport { AddCategory } from './AddCategory';\r\nimport GifGrid  from \"./GiphyGrid\";\r\n\r\nexport default function GifExpertApp(){\r\n\r\n    // const categories : string[] = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    // Similar a la declaracion de una variable que usa el useState con la diferencia de que en este \r\n    // se esta usando un arreglo\r\n    const [categories, setCategories] = useState(['Naruto']);\r\n    // function handleAdd(){\r\n    //     setCategories(cats => [...cats, 'Hunter X Hunter'])\r\n    // }\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n                {\r\n                    categories.map( (category : string) => \r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    )\r\n                }\r\n        </>\r\n    )\r\n}","import ReactDOM from 'react-dom';\n\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}